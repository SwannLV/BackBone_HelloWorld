{"ts":1352216095659,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1352216100529,"patch":[[{"diffs":[[1,"// **This example introduces two new Model actions (swap and delete), illustrating how such actions can be handled within a Model's View.**\r\n//\r\n// _Working example: [5.html](../5.html)._\r\n\r\n//\r\n(function($){\r\n  // `Backbone.sync`: Overrides persistence storage with dummy function. This enables use of `Model.destroy()` without raising an error.\r\n  Backbone.sync = function(method, model, success, error){ \r\n    success();\r\n  }\r\n  \r\n  var Item = Backbone.Model.extend({\r\n    defaults: {\r\n      part1: 'hello',\r\n      part2: 'world'\r\n    }\r\n  });\r\n  \r\n  var List = Backbone.Collection.extend({\r\n    model: Item\r\n  });\r\n\r\n  var ItemView = Backbone.View.extend({\r\n    tagName: 'li', // name of tag to be created        \r\n    // `ItemView`s now respond to two clickable actions for each `Item`: swap and delete.\r\n    events: { \r\n      'click span.swap':  'swap',\r\n      'click span.delete': 'remove'\r\n    },    \r\n    // `initialize()` now binds model change/removal to the corresponding handlers below.\r\n    initialize: function(){\r\n      _.bindAll(this, 'render', 'unrender', 'swap', 'remove'); // every function that uses 'this' as the current object should be in here\r\n\r\n      this.model.bind('change', this.render);\r\n      this.model.bind('remove', this.unrender);\r\n    },\r\n    // `render()` now includes two extra `span`s corresponding to the actions swap and delete.\r\n    render: function(){\r\n      $(this.el).html('<span style=\"color:black;\">'+this.model.get('part1')+' '+this.model.get('part2')+'</span> &nbsp; &nbsp; <span class=\"swap\" style=\"font-family:sans-serif; color:blue; cursor:pointer;\">[swap]</span> <span class=\"delete\" style=\"cursor:pointer; color:red; font-family:sans-serif;\">[delete]</span>');\r\n      return this; // for chainable calls, like .render().el\r\n    },\r\n    // `unrender()`: Makes Model remove itself from the DOM.\r\n    unrender: function(){\r\n      $(this.el).remove();\r\n    },\r\n    // `swap()` will interchange an `Item`'s attributes. When the `.set()` model function is called, the event `change` will be triggered.\r\n    swap: function(){\r\n      var swapped = {\r\n        part1: this.model.get('part2'), \r\n        part2: this.model.get('part1')\r\n      };\r\n      this.model.set(swapped);\r\n    },\r\n    // `remove()`: We use the method `destroy()` to remove a model from its collection. Normally this would also delete the record from its persistent storage, but we have overridden that (see above).\r\n    remove: function(){\r\n      this.model.destroy();\r\n    }\r\n  });\r\n  \r\n  // Because the new features (swap and delete) are intrinsic to each `Item`, there is no need to modify `ListView`.\r\n  var ListView = Backbone.View.extend({\r\n    el: $('body'), // el attaches to existing element\r\n    events: {\r\n      'click button#add': 'addItem'\r\n    },\r\n    initialize: function(){\r\n      _.bindAll(this, 'render', 'addItem', 'appendItem'); // every function that uses 'this' as the current object should be in here\r\n      \r\n      this.collection = new List();\r\n      this.collection.bind('add', this.appendItem); // collection event binder\r\n\r\n      this.counter = 0;\r\n      this.render();\r\n    },\r\n    render: function(){\r\n      var self = this;\r\n      $(this.el).append(\"<button id='add'>Add list item</button>\");\r\n      $(this.el).append(\"<ul></ul>\");\r\n      _(this.collection.models).each(function(item){ // in case collection is not empty\r\n        self.appendItem(item);\r\n      }, this);\r\n    },\r\n    addItem: function(){\r\n      this.counter++;\r\n      var item = new Item();\r\n      item.set({\r\n        part2: item.get('part2') + this.counter // modify item defaults\r\n      });\r\n      this.collection.add(item);\r\n    },\r\n    appendItem: function(item){\r\n      var itemView = new ItemView({\r\n        model: item\r\n      });\r\n      $('ul', this.el).append(itemView.render().el);\r\n    }\r\n  });\r\n\r\n  var listView = new ListView();\r\n})(jQuery);\r\n\r\n// <div style=\"float:left; margin-bottom:40px;\"><img style=\"width:42px; margin-right:10px;\" src=\"https://twitter.com/images/resources/twitter-bird-light-bgs.png\"/></div> <div style=\"background:rgb(245,245,255); padding:10px;\">Follow me on Twitter: <a target=\"_blank\" href=\"http://twitter.com/ar2r\">@ar2r</a> </div>\r\n// <script>\r\n//   if (window.location.href.search(/\\?x/) < 0) {\r\n//     var _gaq = _gaq || [];\r\n//     _gaq.push(['_setAccount', 'UA-924459-7']);\r\n//     _gaq.push(['_trackPageview']);\r\n//     (function() {\r\n//       var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\r\n//       ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\r\n//       var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\r\n//     })();\r\n//   }\r\n// </script>\r\n"]],"start1":0,"start2":0,"length1":0,"length2":4748}]],"length":4748,"saved":false}
